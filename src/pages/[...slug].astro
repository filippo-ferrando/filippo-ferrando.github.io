---
import { type CollectionEntry, getCollection } from 'astro:content';
import Prose from '../components/Prose.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import FormattedDate from '../components/FormattedDate.astro';
import AboutTheAuthor from '../components/widgets/AboutTheAuthor.astro';
import TableOfContent from '../components/widgets/TableOfContent.astro';
import { slugify, calculateReadingTime } from '../utils';
import { loadEnv } from 'vite';
import type { BlogPost } from '../types';

const { GISCUS_REPO, GISCUS_REPO_ID, GISCUS_CATEGORY, GISCUS_CATEGORY_ID } = loadEnv(process.env.NODE_ENV || 'production', process.cwd(), '');

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post: BlogPost) => ({
		params: { slug: post.slug },
		props: post
	}));
}

type Props = BlogPost;
const post = Astro.props;
const {
	data: { title, seoTitle, description, coverImage, pubDate, updatedDate, tags }
} = post;
const { Content, headings } = await post.render();

// Calculate reading time from post content
const readingTime = calculateReadingTime(post.body);

// Prepare SEO props
const seoProps = {
  title: seoTitle || title,
  description,
  type: 'article' as const,
  publishedTime: pubDate.toISOString(),
  ...(updatedDate && { modifiedTime: updatedDate.toISOString() }),
  ...(tags && tags.length > 0 && { tags }),
  ...(coverImage && { image: coverImage.src })
};
---

<BaseLayout {...seoProps}>
	<div class='container'>
		<div class='lg:flex gap-8 xl:gap-12'>
			<main class='overflow-hidden lg:flex-1 lg:max-w-4xl'>
				<article itemscope itemtype="https://schema.org/BlogPosting">
					<header class='mb-8'>
						<h1 class='text-3xl md:text-4xl font-bold leading-tight mb-4' itemprop="headline">
							{title}
						</h1>
						
						<div class='flex flex-col sm:flex-row gap-4 sm:justify-between sm:items-center text-sm'>
							<div class='flex flex-wrap gap-2'>
								{tags && tags.map((tag: string) => (
									<a
										href={`/tags/${slugify(tag)}`}
										class='inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 dark:bg-zinc-800 dark:text-zinc-200 dark:hover:bg-zinc-700 transition-colors duration-200'
										itemprop="keywords"
									>
										{tag}
									</a>
								))}
							</div>
							
							<div class='flex flex-col sm:items-end gap-2 text-gray-600 dark:text-gray-400'>
								<time 
									datetime={pubDate.toISOString()}
									itemprop="datePublished"
									class='text-sm'
								>
									{updatedDate ? (
										<>
											Updated on <strong><FormattedDate date={updatedDate} /></strong>
										</>
									) : (
										<>
											Published on <strong><FormattedDate date={pubDate} /></strong>
										</>
									)}
								</time>
								{updatedDate && (
									<meta itemprop="dateModified" content={updatedDate.toISOString()} />
								)}
								<div class='text-xs'>
									<span itemprop="timeRequired">
										{readingTime} min read
									</span>
									<meta itemprop="timeRequired" content={`PT${readingTime}M`} />
								</div>
							</div>
						</div>
					</header>

					{coverImage && (
						<div class='mb-8 overflow-hidden rounded-xl'>
							<Image 
								src={coverImage} 
								alt={title} 
								class='w-full h-auto' 
								loading='eager'
								itemprop="image"
							/>
						</div>
					)}

					<Prose>
						<div itemprop="articleBody">
							<Content />
						</div>
					</Prose>

					<meta itemprop="author" content="Filippo Ferrando" />
					<meta itemprop="publisher" content="Filippo Ferrando" />
				</article>
				
				{/* Mobile Author Section */}
				<div class='mt-8 lg:hidden'>
					<AboutTheAuthor />
				</div>
				
				{
					GISCUS_REPO &&
						<script
							id='giscus-script'
							is:inline
							src='https://giscus.app/client.js'
							data-repo={GISCUS_REPO}
							data-repo-id={GISCUS_REPO_ID}
							data-category={GISCUS_CATEGORY}
							data-category-id={GISCUS_CATEGORY_ID}
							data-mapping='pathname'
							data-strict='0'
							data-reactions-enabled='1'
							data-emit-metadata='0'
							data-input-position='bottom'
							data-theme='preferred_color_scheme'
							data-lang='en'
							crossorigin='anonymous'
							async></script>
				}
			</main>
			
			{/* Desktop Sidebar */}
			<aside class='hidden lg:block lg:w-72 xl:w-80 lg:shrink-0'>
				<div class='sticky top-8 space-y-6'>
					<div>
						<AboutTheAuthor />
					</div>
					<div>
						<TableOfContent headings={headings} />
					</div>
				</div>
			</aside>
		</div>
	</div>
</BaseLayout>

<script async is:inline>
	const anchors = document.querySelectorAll('.prose h2[id], .prose h3[id]');
	const links = document.querySelectorAll('nav.toc ul li a');

	function observeToc() {
		if (typeof anchors != 'undefined' && anchors != null && typeof links != 'undefined' && links != null) {
			let scrollTop = window.scrollY;

			// highlight the last scrolled-to: set everything inactive first
			for (const link of links) {
				link.classList.add('border-transparent', 'text-inherit');
				link.classList.remove('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
			}
			// then iterate backwards, on the first match highlight it and break
			for (var i = anchors.length - 1; i >= 0; i--) {
				if (scrollTop > anchors[i].offsetTop - 80) {
					links[i].classList.remove('border-transparent', 'text-inherit');
					links[i].classList.add('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
					break;
				}
			}
		}
	}

	window.addEventListener('scroll', (event) => {
		observeToc(event);
	});
	window.addEventListener('hashchange', (event) => {
		observeToc(event);
	});
</script>
